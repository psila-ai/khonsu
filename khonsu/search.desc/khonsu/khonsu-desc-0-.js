searchState.loadedDescShard("khonsu", 0, "<strong>Khonsu: A Software Transactional Memory (STM) Library in </strong>…\nArrow in-mem data management utilities.\nConflict resolution system.\nTransactional variable storage layer.\nInter/Intra data dependency tracking\n2PC Mechanism &amp; Distributed Commit Integration\nKhonsu Errors\nIsolation Level definitions\nKhonsu - Transaction Management System\nPrelude of the Khonsu.\nStorage agnostic pluggable commit mechanism\nBase transaction system\nMerges changes from a write set (insertions, updates, …\nThis module contains logic for detecting transaction …\nThis module contains logic for resolving transaction …\nThe transaction read data that was deleted by another …\nThe transaction read data that was modified by another …\nThe transaction attempted to write to data that was …\nThe transaction attempted to write to data that was …\nRepresents the type of conflict detected (against …\nChecks for conflicts between a transaction’s read/write …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppend the new data from the committing transaction to the …\nDefines how conflicts should be resolved during …\nFail the transaction if a conflict is detected. The …\nIgnore the conflicting change from the committing …\nReplace the existing data in the transaction buffer with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains data structures and logic for the …\nThe Transaction Buffer (TxnBuffer)\nCreates a new, empty <code>TxnBuffer</code> with default settings.\nRemoves a value from the buffer based on the key.\nReturns the argument unchanged.\nRetrieves a <code>VersionedValue</code> from the buffer based on the …\nInserts or updates a <code>VersionedValue</code> in the buffer.\nCalls <code>U::from(self)</code>.\nCreates a new, empty <code>TxnBuffer</code>.\nRepresents a data value with an associated …\nReturns a reference to the data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>VersionedValue</code>.\nReturns the version of the value.\nRepresents a data item for dependency tracking purposes.\nA concurrent data structure to track transaction …\nCreates a new <code>DependencyTracker</code> with default configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique key identifying the data item.\nMarks a transaction as Aborted.\nMarks a transaction as Committed. Stores write set keys …\nCreates a new <code>DependencyTracker</code>.\nRecords that an <em>active</em> transaction read a data item at a …\nRecords that an <em>active</em> transaction intends to write to a …\nRegisters a new transaction as Active.\nValidates serializability using SSI principles.\nThe transaction has been aborted.\nThe transaction has been committed.\nRepresents a globally unique transaction identifier.\nThe transaction has been prepared but not yet committed or …\nRepresents a transaction commit that is replicated through …\nSnapshot for ReplicatedCommit used by OmniPaxos.\nA serializable wrapper for VersionedValue.\nRepresents the state of a transaction in the two-phase …\nExtensions for communication channels with node …\nThe node that coordinated this transaction.\nThe timestamp when this transaction was committed or …\nConfiguration structures for distributed operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new SerializableVersionedValue from a …\ngRPC server implementation for inter-node communication\nComputes a hash value for this transaction ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this transaction is aborted.\nReturns whether this transaction is committed.\nReturns whether this transaction is prepared but not yet …\nReturns whether this is a tombstone.\nThe last transaction ID in the snapshot.\nThe local transaction ID assigned by the node.\nDistributed Commit Manager\nMarks this transaction as aborted.\nMarks this transaction as committed.\nNetwork communication layer for consensus messages\nCreates a new <code>GlobalTransactionId</code>.\nCreates a new ReplicatedCommit in the Prepared state.\nCreates a new tombstone SerializableVersionedValue.\nThe ID of the node that created this transaction.\nThe set of nodes that participated in this transaction.\nMulti Paxos Service\nPrelude of the distributed commits.\nThe timestamp when this transaction was prepared.\nThe read set of the transaction, used for validation …\nMap of keys to their versions in the snapshot.\nThe current state of the transaction in the 2PC protocol.\nPersistent storage implementation for the commit log\nA timestamp for ordering and debugging purposes.\nConverts this SerializableVersionedValue back to a …\nThe globally unique identifier for this transaction.\nTwo-Phase Commit (2PC) protocol implementation over Multi …\nReturns the version of this value.\nThe set of changes to be applied by this transaction.\nA wrapper around <code>channel::Sender&lt;ReplicatedCommit&gt;</code> that …\nExtension trait for <code>channel::Sender&lt;ReplicatedCommit&gt;</code> to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new NodeSender.\nReturns the node ID associated with this sender.\nThe node ID.\nSends a message through the channel.\nThe underlying sender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts the gRPC server for OmniPaxos communication.\nManages the distributed commit process using multi paxos …\nCreates a new decision receiver for a transaction.\nReturns the argument unchanged.\nReturns the sender for the multi paxos event loop.\nCalls <code>U::from(self)</code>.\nCreates and starts a new <code>DistributedCommitManager</code>.\nProposes a transaction commit to the multi paxos consensus …\nShuts down the DistributedCommitManager.\nNetwork implementation for OmniPaxos using gRPC.\nAdds outgoing messages to the buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>KhonsuNetwork</code> with gRPC clients for peers …\nReceives a message from another node.\nTakes outgoing messages from the buffer and sends them.\nRepresents a message exchanged between Multi Paxos nodes. …\nRepresents the data for a replicated transaction commit. …\nResponse for the SendMessage RPC.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPlaceholder for the actual Multi Paxos message payload. …\nGenerated client implementations.\nGenerated server implementations.\nCould include a status or acknowledgment if needed.\nRepresenting the write_set. This is a simplified map; …\nService definition for Multi Paxos communication.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nA simple RPC for sending a message to another Multi Paxos …\nGenerated trait containing gRPC methods that should be …\nService definition for Multi Paxos communication.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nA simple RPC for sending a message to another Multi Paxos …\nStorage backend for OmniPaxos, persisting log entries to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DistributedCommitStorage</code> with a RocksDB …\nThe transaction is in the abort phase.\nThe participant has voted to abort the transaction.\nThe transaction is in the commit phase.\nThe participant has committed the transaction.\nRepresents a participant in the 2PC protocol.\nRepresents the state of a participant in the 2PC protocol.\nThe transaction is in the prepare phase.\nThe participant has voted to prepare the transaction.\nManages 2PC transactions.\nRepresents the phase of a transaction in the 2PC protocol.\nRepresents a transaction in the 2PC protocol.\nThe participant has not yet voted.\nChecks if all participants have committed the transaction.\nChecks if all participants have prepared the transaction.\nChecks if any participant has aborted the transaction.\nChecks for timed out transactions and aborts them.\nThe ID of the coordinator node.\nCreates a new 2PC transaction.\nThe timestamp when the transaction was created.\nThe timestamp when the transaction was decided (committed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all transactions where this node is the coordinator.\nGets all transactions where this node is a participant.\nGets the replicated commit entry with the current …\nGets a 2PC transaction.\nGets the transaction state based on the 2PC phase.\nGets all transactions in a specific phase.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the transaction to the abort phase.\nMoves the transaction to the commit phase.\nCreates a new 2PC manager.\nCreates a new 2PC transaction.\nThe ID of the local node.\nThe ID of the participant node.\nThe participants in the transaction.\nThe current phase of the transaction.\nRemoves a completed transaction.\nThe replicated commit entry for this transaction.\nSets the decision timestamp.\nThe state of the participant.\nThe timestamp when the participant last updated its state.\nThe global transaction ID.\nThe timeout for 2PC transactions.\nThe active 2PC transactions.\nUpdates the state of a participant.\nUpdates the state of a participant in a 2PC transaction.\nIndicates an error during manipulation or processing of …\nRepresents an error that occurred during the distributed …\nContains the error value\nSignifies that an attempted operation is not valid for the …\nRepresents the possible errors that can occur within the …\nContains the success value\nA general-purpose error variant for capturing other …\nA convenient type alias for the standard <code>Result</code> with …\nIndicates the rollback\nRepresents an error that occurred during interaction with …\nRepresents an error that occurred during interaction with …\nIndicates that a transaction conflict was detected during …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Read Committed:</strong>\n<strong>Repeatable Read:</strong>\n<strong>Serializable:</strong>\nDefines the isolation levels supported by the Khonsu …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe main entry point for the Khonsu Software Transactional …\nTracks dependencies between transactions for …\nProvides access to the distributed commit manager if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Khonsu STM instance.\nKonshu Prelude\nStarts a new transaction.\nConfiguration for an <code>OmniPaxos</code> cluster.\nID for an OmniPaxos configuration (i.e., the set of …\nThe entry is decided.\nDerive macro for declaring an OmniPaxos log entry type.\nFlexible quorums can be used to increase/decrease the read …\nThe entry read in the log.\nStruct used to help another server synchronize their log …\nID for an OmniPaxos node\nError message to display when there was an error reading …\nKeeps track of the ordering of messages in the accept phase\nThe entry has been snapshotted.\nThis Sequence Paxos instance has been stopped for …\nThe entry has been trimmed.\nThe entry is NOT decided. Might be removed from the log at …\nDerive macro for declaring an OmniPaxos log entry type …\nError message to display when there was an error writing …\nChecks all configuration fields and builds a local …\nThe identifier for the cluster configuration that this …\nThe sequence number with respect to a session\nThe decided snapshot.\nDefines read and write quorum sizes. Can be used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe nodes in the cluster i.e. the <code>pid</code>s of the servers in …\nThe number of nodes a leader needs to consult to get an …\nMeant to refer to a TCP session\nThe accepted StopSign.\nThe log suffix.\nThe index of the log where the entries from <code>suffix</code> should …\nChecks that all the fields of the cluster config are valid.\nThe number of acknowledgments a leader needs to commit an …\nDelete the record with the given key. If no record with …\nInsert or update a record with the given key and …\nTrait for interacting with a storage layer to persist …\nRepresents a single mutation to be applied to the storage …\nAtomically applies the given mutations to the storage …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the outcome of a distributed transaction commit.\nRepresents a single transaction.\nAttempts to commit the transaction.\nStages a delete operation for a key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier of the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new transaction.\nReads data associated with a key.\nAborts the transaction, discarding staged changes.\nStages a write operation for a key with the provided …")